const fs = require('fs');const path = require('path');const _ = require('lodash');const rimraf = require('rimraf');const dir = path.resolve(`${__dirname}${path.sep}..${path.sep}src${path.sep}common${path.sep}error`);const fileList = fs.readdirSync(dir).filter(v => v !== 'index.ts').filter(v => v !== 'base.error.ts');// 特殊错误码处理const specialCode = {  10002: '请求参数错误，具体看实际请求'};function main() {  const errMap = {};  const typeMap = {};  for (const file of fileList) {    const fileContent = fs.readFileSync(`${dir}${path.sep}${file}`).toString('utf-8').trim();    let content = _.cloneDeep(fileContent);    content = content.substring(content.indexOf('/**'), content.indexOf('export const'));    content = content.replace(new RegExp(/\*/ig), '');    content = content.replace(new RegExp(/\//ig), '');    content = content.trim();    const type = parseInt(content.replace(new RegExp(/\D+/g), '').trim());    typeMap[type] = content.substr(0, content.indexOf('(')).trim();    let fakeJsCode = 'const BaseError = function(code, message) {this.code=code;this.message=message};module.exports';    fakeJsCode += fileContent.substr(fileContent.indexOf('= {')).trim();    for (const errObj of new Array(eval(fakeJsCode))) {      for (const error of Object.values(errObj)) {        errMap[error.code] = error.message;      }    }  }  Object.keys(specialCode).forEach(k => errMap[k] = specialCode[k]);  const codeFile = path.resolve(`${dir}${path.sep}..${path.sep}..${path.sep}`) + '/error.code.ts';  rimraf.sync(codeFile);  let content = '';  content += '/**\r\n';  content += ` * @apiDefine errorCode 错误码\r\n`;  content += ' */\r\n\r\n';  for (const type of Object.keys(typeMap)) {    content += '/**\r\n';    content += ` * @api /${type} ${type}-${typeMap[type]}\r\n`;    content += ` * @apiGroup errorCode\r\n`;    let index = parseInt(type);    while (true) {      index += 1;      const errName = (errMap[index] || '').trim();      if (!errName) {        break;      }      content += ` * @apiParam ${index} ${errName}\r\n`;    }    content += ' */\r\n\r\n';  }  fs.writeFileSync(codeFile, content);}main();